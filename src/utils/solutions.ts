import { Exercise } from '../types';
import { parseExpression } from './exerciseGenerator';

export function getSolutionExplanation(exercise: Exercise): string {
  const { firstNumber, operation, result } = parseExpression(exercise.expression);
  
  switch (operation) {
    case '+':
      return `1Ô∏è‚É£ On part de ${firstNumber} et on veut arriver √† ${result}
2Ô∏è‚É£ Pour trouver ce qu'il faut ajouter, on calcule la diff√©rence :
   ${result} - ${firstNumber} = ${exercise.missing}
3Ô∏è‚É£ On v√©rifie : ${firstNumber} + ${exercise.missing} = ${result}

üí° Astuce : Pour v√©rifier une addition, on peut faire la soustraction inverse`;

    case '-':
      return `1Ô∏è‚É£ On part de ${firstNumber} et on veut obtenir ${result}
2Ô∏è‚É£ Pour trouver ce qu'il faut soustraire, on calcule :
   ${firstNumber} - ${result} = ${exercise.missing}
3Ô∏è‚É£ On v√©rifie : ${firstNumber} - ${exercise.missing} = ${result}

üí° Astuce : La soustraction est l'op√©ration inverse de l'addition`;

    case 'x':
      return `1Ô∏è‚É£ On cherche combien de fois ${firstNumber} entre dans ${result}
2Ô∏è‚É£ Pour trouver ce nombre, on divise :
   ${result} √∑ ${firstNumber} = ${exercise.missing}
3Ô∏è‚É£ On v√©rifie : ${firstNumber} √ó ${exercise.missing} = ${result}

üí° Astuce : La multiplication est une addition r√©p√©t√©e
   ${firstNumber} √ó ${exercise.missing} = ${Array(exercise.missing).fill(firstNumber).join(' + ')} = ${result}`;

    case '√∑':
      return `1Ô∏è‚É£ On cherche par quel nombre diviser ${firstNumber} pour obtenir ${result}
2Ô∏è‚É£ Pour le trouver, on peut multiplier ${result} par diff√©rents nombres jusqu'√† obtenir ${firstNumber}
3Ô∏è‚É£ ${result} √ó ${exercise.missing} = ${firstNumber}
   Donc ${firstNumber} √∑ ${exercise.missing} = ${result}

üí° Astuce : La division est l'op√©ration inverse de la multiplication`;

    default:
      return 'Voici la solution de l\'exercice.';
  }
}